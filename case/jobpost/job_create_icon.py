from ui import UI
from ui.low.job_icon import JobIcon
from tool.generators.generator import gen_key

__author__ = 'John Underwood'


class JobCreateIcon(UI):
    """
    Create an input control (I-CON) and then check for correct values.
    """
    JobIcon()
    unique = 'AAutomated ' + gen_key()
    runtime = {
        'new': ('Click', 'css=#control-list>ul>li.active>a',),
        'iConName': ('Type', '#control_name', unique),
        'iConDesc': ('Type', '#control_description', 'Auto-generated by QA'),
        'iConType': (
            'Select', '#job_description_control_type_id', 'Single Select'),
        'internal': ('Click', 'css=#control-editor>div:nth-child(11)>'
                              'label:nth-child(6)', ),
        'addNewOption': ('Click', 'css=#control-editor>div:nth-child(11)>'
                                  'div:nth-child(8)>div:nth-child(2)>a', ),
        'save': ('Click', '#control-save'),
    }
    process = UI()
    process.update(runtime)
    order = ('new', 'iConName', 'iConDesc', 'iConType', 'internal',
             'addNewOption')
    process.execute(order)
    process.wait()

    process.update({
        'option1': ('Type', '#ss_row_0_display_value', 'option 1')
    })
    process.execute(('option1', ))
    process.wait()
    # The Save button should still be inactive.
    save_button_state = process.spy('#control-save', 'class')
    process.compare(True,
                    ('disabled' in save_button_state),
                    message='the "Save" button should be disabled')

    process.update({
        'option2': ('Type', '#ss_row_1_display_value', 'option 2')
    })
    process.execute(('addNewOption', 'option2', 'addNewOption'))
    process.wait()

    process.update({
        'option3': ('Type', '#ss_row_2_display_value', 'option 3')
    })
    process.execute(('option3', ))
    process.wait()  # pause for Save's button shift
    process.execute(('save', ))
    process.wait()
    process.results('Save Successful')

    available_input_controls = process.spy('#control-list', 'innerHTML')
    process.compare(True,
                    unique in available_input_controls,
                    message='input control should be inside list')

    process.wait()
    process.teardown()
